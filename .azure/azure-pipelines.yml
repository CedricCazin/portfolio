# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
    - main
pr:
    - main

variables:
    CI: 'true'
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        NX_BRANCH: $(System.PullRequest.PullRequestId) # You can use $(System.PullRequest.PullRequestNumber if your pipeline is triggered by a PR from GitHub ONLY)
        TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        NX_BRANCH: $(Build.SourceBranchName)
    HEAD_SHA: $(git rev-parse HEAD)
    DEFAULT_BASE_SHA: $(git rev-parse HEAD~1)

pool:
    vmImage: 'ubuntu-latest'

steps:
    # Set Azure Devops CLI default settings
    - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject)
      displayName: 'Set default Azure DevOps organization and project'

    # Get last successfull commit from Azure Devops CLI
    - bash: |
          LAST_SHA=$(az pipelines build list --branch $(Build.SourceBranchName) --definition-ids $(System.DefinitionId) --result succeeded --top 1 --query "[0].triggerInfo.\"ci.sourceSha\"")
          if [ -z "$LAST_SHA" ]
          then
            LAST_SHA=$DEFAULT_BASE_SHA
          fi
          echo "Last successful commit SHA: $LAST_SHA"
          echo "##vso[task.setvariable variable=BASE_SHA]$LAST_SHA"
      env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
      displayName: 'Get last successful commit SHA'

    - script: npm version

    - script: npm ci

    # Create tags
    - pwsh: |
          npx nx affected:apps --base=$(BASE_SHA) --head=$(HEAD_SHA) | grep -E '( - )(\w|-|\d|_)+' | sed -E 's/ - /##vso[build.addbuildtag]/g'
      displayName: 'Adding build tags'

    # Get list of affected apps
    - bash: |
          AFFECTED_APPS=$(npx nx print-affected --select=projects --type=app --base=$(BASE_SHA) --head=$(HEAD_SHA) | sed -e 's/^/|/' -e 's/, /|/g' -e 's/$/|/')
          echo "AFFECTED_APPS: $AFFECTED_APPS"
          echo "##vso[task.setvariable variable=AFFECTED_APPS]$AFFECTED_APPS"
      displayName: 'Adding AffectedApps variable'

    - script: npx nx format:check --base=$(BASE_SHA)

    - script: npx nx affected --base=$(BASE_SHA) -t lint --parallel=3

    # - script: npx nx affected --base=$(BASE_SHA) -t test --parallel=3 --configuration=ci
    # - script: npx nx affected --base=$(BASE_SHA) -t e2e --parallel=3 --configuration=ci

    - script: npx nx affected --base=$(BASE_SHA) -t build --parallel=3

    - task: ArchiveFiles@2
      condition: eq(contains(variables['AFFECTED_APPS'], '|web-app|'), true)
      inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)/dist/apps/web-app'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip'

    - publish: '$(Build.ArtifactStagingDirectory)'
      condition: eq(contains(variables['AFFECTED_APPS'], '|web-app|'), true)
      artifact: web-app

    - task: ArchiveFiles@2
      condition: eq(contains(variables['AFFECTED_APPS'], '|web-app-games|'), true)
      inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)/dist/apps/web-app-games'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip'

    - publish: '$(Build.ArtifactStagingDirectory)'
      condition: eq(contains(variables['AFFECTED_APPS'], '|web-app-games|'), true)
      artifact: web-app-games
